Numpy note

numpy中的ndarray和array有什么区别？
  np.ndarray 是一个类对象
  np.array()是一个方法函数
  使用np.array([1，2，3，4，5])创建了一个数组，该数组的类型是np.ndarray
 
 
通常我们创建ndarray的数组时，用以下几种方式创建：
  np.arrary([1,2,2,3])
  np.zeros([2,3])=>2行三列 全0数组
  np.ones([2,3])=> 2行三列全1数组
  ....
  但是我们不用np.ndarrary([])创建数组



为什么要用numpy，python不是有list吗？

      Numpy数组通常是由相同种类的元素组成的，即数组中的数据项的类型一致。这样有一个好处，由于知道数组元素的类型相同，所以能快速确定存储数据所需空间的大小。
      Numpy数组能够运用向量化运算来处理整个数组，速度较快；而Python的列表则通常需要借助循环语句遍历列表，运行效率相对来说要差。
      Numpy使用了优化过的C API，运算速度较快
      
      
关于向量化和标量化运算，对比下面的参考例子就可以看出差异

使用python的list进行循环遍历运算
  def pySum():
    a = list(range(10000))
    b = list(range(10000))
    c = []
    for i in range(len(a)):
        c.append(a[i]**2 + b[i]**2)

    return c
%timeit pySum()
10 loops, best of 3: 49.4 ms per loop

使用numpy进行向量化运算：
  def npSum():
      a = np.arange(10000)
      b = np.arange(10000)
      c = a**2 + b**2
      return c
%timeit npSum()
The slowest run took 262.56 times longer than the fastest. This could mean that an intermediate result is being cached.
1000 loops, best of 3: 128 µs per loop



多维数组的元素个数=各个维度乘积：
  比如：np.arrange(48).reshape(3,4,4)或者np.arrange(48).reshape(2,6,4)


