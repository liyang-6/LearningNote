numpy 笔记

Numpy note

numpy中的ndarray和array有什么区别？
	np.ndarray 是一个类对象
	np.array()是一个方法函数
	使用np.array([1，2，3，4，5])创建了一个数组，该数组的类型是np.ndarray
 
 
通常我们创建ndarray的数组时，用以下几种方式创建：
	np.arrary([1,2,2,3])
	np.zeros([2,3])=>2行三列 全0数组
	np.ones([2,3])=> 2行三列全1数组
	....
 	但是我们一般不用np.ndarrary([])创建数组

ndarray对象有哪些属性？
	.ndim 维度
	.shape 返回元组（行，列）
	.size 返回数值，行列乘积
	.dtype




为什么要用numpy，python不是有list吗？

	Numpy数组通常是由相同种类的元素组成的，即数组中的数据项的类型一致。这样有一个好处，由于知道数组元素的类型相同，所以能快速确定存储数据所需空间的大小。
	Numpy数组能够运用向量化运算来处理整个数组，速度较快；而Python的列表则通常需要借助循环语句遍历列表，运行效率相对来说要差。
	Numpy使用了优化过的C API，运算速度较快
      
      
关于向量化和标量化运算，对比下面的参考例子就可以看出差异

		使用python的list进行循环遍历运算
		  def pySum():
		    a = list(range(10000))
		    b = list(range(10000))
		    c = []
		    for i in range(len(a)):
		        c.append(a[i]**2 + b[i]**2)

		    return c
		%timeit pySum()
		10 loops, best of 3: 49.4 ms per loop

		使用numpy进行向量化运算：
		  def npSum():
		      a = np.arange(10000)
		      b = np.arange(10000)
		      c = a**2 + b**2
		      return c
		%timeit npSum()
		The slowest run took 262.56 times longer than the fastest. This could mean that an intermediate result is being cached.
		1000 loops, best of 3: 128 µs per loop



多维数组的元素个数=各个维度乘积：
  比如：np.arrange(48).reshape(3,4,4)或者np.arrange(48).reshape(2,6,4)


 数组的广播：
 	广播是为了让维数不同的数组进行运算（加减乘）

 	怎么判断两个数组是否可以广播？
 		技巧：
 			根据数组的shape，从较短的shape开始，从右向左，如果较短的shape中的数字与较长的shape的数字相同，或者为1，则两个数组可以广播
 		举例：
 		两个数组的shape分别为：
 			（1,2,3）（2,3）=> 可以广播，因为从右至左，短shape的3和长shape的3相等，短shape的2和长shape的2相等

 			（1,2,3）（2,1）=> 可以广播，因为从右至左，短shape的1和长shape的3虽然不相等，但是有个1；短shape的2和长shape的2相等

 			（1,2,3）（1,3）=> 可以广播，因为从右至左，短shape的3和长shape的3相等；短shape的1和长shape的2虽然不相等，但是有个1



 数组的相乘（点积）以及数组元素相乘
 	np.dot(arr1,arr2)表示点积，也就是数学中的两个矩阵相乘，只要满足前者矩阵的列与后者矩阵的行相等，即可点积。比如shape为(2,3)和shape为(3,1)，可以点积，运算后的shape为（2,1）

 	np.mulitpe(arr1,arr2)表示数组的元素相乘


 多维数组的索引与切片
 	[...,1]...表示剩余切片


 numpy数组中的数据类型转换
 	对象.astype()
 	arr.astype(float64):将arr中的数据类型转换成float
 	注意：
 		float转换成int，是把小数点后面的省略，并不是四舍五入


sort和argsort的区别，所有前面加arg的函数返回的是什么？
	 np.sort()返回的是排序后的数组，可以添加axis指定轴
	 np.argsort()返回的是排序后的元素索引，可以添加axis指定轴
	 同理：
	 	argmin()
	 	argmax()
	 	。。。返回的都是索引


np.where（x>0）返回的是什么？
	返回的是一个元组，元组的元素是：数组x的维度的索引
	举例：
	arr=np.array([[1,4,5],
              [11,4,6],
              [9,3,4]])
	print(np.where(arr>3))

	结果：(array([0, 0, 1, 1, 1, 2, 2], dtype=int64), array([1, 2, 0, 1, 2, 0, 2], dtype=int64))
	这个结果怎么看？
		第一个array和第二array的对应的元素的组合就是arr中符合arr>3的元素
		（0,1）（0,2）（1,0）（1,1）（1,2）（2,0）（2,2）
		所以arr中（0,1）就是元素4，（0,2）就是元素5


np.where 如何替换
	np.where(arr>3,arr,-1)	#arr中元素大于3的保留，小于3的替换成-1
	np.wherer(arr>3,1,-1)	#arr中元素大于3的替换成1，小于3的替换成-1


	如果多个条件，怎么操作？
		np.where(np.logical_or(arr>5,arr<2),arr,-1)


np.unique()用法已经应用场景（查询种类）
	剔除数组中重复的元素
		这个用途可以用来查询一列数组中有多少类别（重复的元素就不会计数）

如何理解轴的概念？轴方向的操作（画图）
	如果按axis=1轴方向排序，np.sort(arr,axis=1),那么在axis=1方向上的数列应为[1,2,3,4,4,6]
	如果按axis=0轴方向排序，np.sort(arr,axis=0),那么在axis=0方向上的数列应为
	[1,1,...
	 2,1,...
	 3,3,...
	 4,4,...
	 5,7,...]
	 记得看竖向！！！！！

				axis=1
			|-------------->
			|[1,4,3,4,2,6]
			|[3,3,7,4,5,9]
	axis=0	|[4,1,6,6,5,8]
			|[5,1,3,4,7,6]
			|[2,7,4,4,5,6]


